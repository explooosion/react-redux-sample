{"version":3,"sources":["reducers/todos.js","reducers/index.js","actions/index.js","containers/AddTodo.js","components/Todo.js","containers/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["todos","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","id","text","completed","map","todo","objectSpread","combineReducers","nextTodoId","AddTodo","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","item","addTodo","setState","_this2","react_default","a","createElement","value","onChange","e","target","onClick","onAdd","React","Component","connect","dispatch","Todo","_this$props","style","padding","fontSize","textDecoration","cursor","TodoList","toggleTodo","components_Todo","assign","key","defaultProps","App","className","containers_AddTodo","containers_TodoList","Boolean","window","location","hostname","match","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0fc8204.chunk.js","sourcesContent":["const todos = (state = [], action) => {\n  // Reducers\n  // 依據 Actions 所定義的 type 進行資料的儲存\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false,\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? { ...todo, completed: !todo.completed }\n          : todo\n      )\n    default:\n      return state;\n  }\n}\n\nexport default todos;","import { combineReducers } from 'redux';\nimport todos from './todos';\n\nexport default combineReducers({\n  todos,\n})","let nextTodoId = 0;\n\n// Actions\n// 功能如同 controller, 將每個動作自訂一種 type 名稱，\n// 其餘參數則自行添增。\n\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text,\n});\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id,\n});","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions';\n\nclass AddTodo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: '',\n    };\n  }\n\n  onAdd() {\n    this.props.addTodo(this.state.item);\n    this.setState({ item: '' });\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.item} onChange={(e) => this.setState({ item: e.target.value })} />\n        <button onClick={() => this.onAdd()}>ADD</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTodo: (item) => dispatch(addTodo(item)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTodo);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Todo extends Component {\n  render() {\n    const { onClick, completed, text } = this.props;\n    return (\n      <li\n        onClick={onClick}\n        style={{\n          padding: '.2rem',\n          fontSize: '20px',\n          textDecoration: completed ? 'line-through' : 'none',\n          cursor: 'pointer',\n        }}\n      >\n        {text}\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { toggleTodo } from '../actions';\n\nimport Todo from '../components/Todo';\n\nclass TodoList extends Component {\n  render() {\n    // 透過 mapStateToProps, mapDispatchToProps 注入\n    const { todos, toggleTodo } = this.props;\n    return (\n      <ul>\n        {todos.map(todo =>\n          <Todo\n            key={todo.id}\n            {...todo}\n            onClick={() => toggleTodo(todo.id)}\n          />\n        )}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  // \b\b此 state 將會注入在 props\n  // 前面只是 key 名稱，該名稱用在 props 中提取\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // \b\b此 dispatch 將會注入在 props\n  // 後面的 toggleTodo 是來自 ../actions\n  toggleTodo: (id)=>dispatch(toggleTodo(id)),\n});\n\nTodoList.propTypes = {\n  todos: PropTypes.array.isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n}\n\nTodoList.defaultProps = {\n  todos:[],\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoList);\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport AddTodo from './containers/AddTodo';\nimport TodoList from './containers/TodoList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AddTodo />\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// 引入 redux 的組件\nimport { Provider } from 'react-redux';\n// 引入 redux 的 store\nimport { createStore } from 'redux';\n// 引入自己的 reducers\nimport rootReducer from './reducers';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// 建立 store 儲存區\nconst store = createStore(\n  rootReducer,\n  // 用在擴充套件的追蹤檢視\n  // https://github.com/zalmoxisus/redux-devtools-extension#usage\n  // https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}